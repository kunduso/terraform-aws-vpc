trigger:
  branches:
    include:
      - '*'
  paths:
    exclude:
      - 'README.md'

pr:
  branches:
    include:
      - main  # Trigger pipeline on PRs to the 'main' branch
  paths:
    exclude:
      - 'README.md'

variables:
- group: awscredentials
- group: awstestcredentials
- group: GH_TOKEN

jobs:
- job: Validate
  variables:
    terraformVersion: '1.11.0'  # Specify the Terraform version
    workingDirectory: 'example'  # Set working directory to 'example'
    awsRegion: 'us-east-2'  # AWS Region to deploy to (adjust as needed)

  displayName: 'Validate Terraform Configuration'
  pool:
    vmImage: 'ubuntu-latest'  # Use an Ubuntu agent

  steps:
    # Install Terraform using a script
    - script: |
        curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform --version
      displayName: 'Install Terraform'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)
    
    # Terraform initialization
    - script: |
        terraform init \
          -backend-config="bucket=kunduso-terraform-remote-bucket" \
          -backend-config="key=tf/terraform-aws-vpc/terraform.tfstate" \
          -backend-config="region=$(awsRegion)" \
          -backend-config="access_key=$(access_key)" \
          -backend-config="secret_key=$(secret_key)" \
          -no-color
      displayName: 'Terraform Init'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)
  
    # Terraform validation
    - script: |
        terraform validate
      displayName: 'Terraform Validate'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)

    # Add Terraform Format Check
    - script: |
        terraform fmt -check -recursive
      displayName: 'Terraform Format Check'
      workingDirectory: $(System.DefaultWorkingDirectory)

- job: Test
  variables:
    terraformVersion: '1.12.0-beta1'  # Specify the Terraform version
    workingDirectory: 'example'  # Set working directory to 'example'

  displayName: 'Test Terraform Configuration'
  pool:
    vmImage: 'ubuntu-latest'  # Use an Ubuntu agent

  steps:
    # Install Terraform using a script
    - script: |
        curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform --version
      displayName: 'Install Terraform'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)

    # Terraform Test
    - script: |
        terraform init
        terraform test -parallelism=4 -junit-xml test_result.xml
      env:
        AWS_ACCESS_KEY_ID: $(test_access_key)
        AWS_SECRET_ACCESS_KEY: $(test_secret_key)
      displayName: 'Terraform Tests'

- job: Provision
  dependsOn: 
    - Test
    - Validate
  condition: and (succeeded('Test'), succeeded('Validate'))
  variables:
    terraformVersion: '1.11.0'  # Specify the Terraform version
    awsRegion: 'us-east-2'  # AWS Region to deploy to (adjust as needed)
    workingDirectory: 'example'  # Set working directory to 'example'
    githubToken: $(GH_TOKEN)  # GitHub token from pipeline secret variable
    githubOwner: 'kunduso'  # GitHub user/organization
    githubRepo: 'terraform-aws-vpc'  # GitHub repository name

  displayName: 'Deploy Terraform Configuration'
  pool:
    vmImage: 'ubuntu-latest'  # Use an Ubuntu agent

  steps:
    # Install Terraform using a script
    - script: |
        curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform --version
      displayName: 'Install Terraform'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)

    # Terraform initialization
    - script: |
        terraform init \
          -backend-config="bucket=kunduso-terraform-remote-bucket" \
          -backend-config="key=tf/terraform-aws-vpc/terraform.tfstate" \
          -backend-config="region=$(awsRegion)" \
          -backend-config="access_key=$(access_key)" \
          -backend-config="secret_key=$(secret_key)" \
          -no-color
      displayName: 'Terraform Init'
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)

    # Terraform Plan with better error handling
    - script: |
        set -e
        terraform plan \
          -var "region=$(awsRegion)" \
          -var "access_key=$(access_key)" \
          -var "secret_key=$(secret_key)" \
          -no-color \
          -out=tfplan.json
      displayName: 'Terraform Plan'
      condition: |
        or(
          ne(variables['Build.SourceBranchName'], 'refs/heads/main'),
          contains(variables['System.PullRequest.SourceBranch'], 'refs/pull/')
        )
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)

    - script: |
        if [[ $(System.PullRequest.SourceBranch) ]]; then
          PR_URL="https://api.github.com/repos/$(githubOwner)/$(githubRepo)/issues/$(System.PullRequest.PullRequestNumber)/comments"
          
          PLAN_OUTPUT=$(terraform show -no-color tfplan.json)
          
          if ! BODY=$(jq -n --arg plan "$PLAN_OUTPUT" '{body: "### Terraform Plan Output\n```\n\($plan)\n```"}'); then
            echo "Failed to create JSON payload"
            exit 1
          fi
          
          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
            -H "Authorization: token $(GH_TOKEN)" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$PR_URL")
          
          STATUS_CODE=$(echo "$RESPONSE" | tail -n 1)
          if [[ $STATUS_CODE != 2* ]]; then
            echo "Failed to post comment. Status code: $STATUS_CODE"
            echo "Response: $(echo "$RESPONSE" | head -n -1)"
            exit 1
          fi
        fi
      displayName: 'Post Plan Output to GitHub PR'
      condition: and(succeeded(), ne(variables['System.PullRequest.SourceBranch'], ''))
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)

    # Terraform Apply with better error handling
    - script: |
        set -e
        terraform apply \
          -var "region=$(awsRegion)" \
          -var "access_key=$(access_key)" \
          -var "secret_key=$(secret_key)" \
          -auto-approve \
          -no-color
      displayName: 'Terraform Apply'
      condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
      workingDirectory: $(System.DefaultWorkingDirectory)/$(workingDirectory)
